%div#modal_simulate_merge_info.modal.hide
  .modal-dialog
    .modal-content
      .modal-header
        %a.close{href: "#", "data-dismiss" => "modal"} Ã—
        %h3 How to simulate a merge for testing
      .modal-body
        - if @merge_request.for_fork?
          - source_remote = @merge_request.source_project.namespace.nil? ? "source" :@merge_request.source_project.namespace.path
          - target_remote = @merge_request.target_project.namespace.nil? ? "target" :@merge_request.target_project.namespace.path
          %p
            %strong Step 1.
            Checkout the branch we are going to merge and pull in the code
          %pre.dark
            :preserve
              git fetch origin
              git checkout -b #{@merge_request.source_project_path}-#{@merge_request.source_branch} origin/#{@merge_request.target_branch}
              git pull #{@merge_request.source_project.http_url_to_repo} #{@merge_request.source_branch}
          %p
            %strong Step 2.
            Merge the branch
          %pre.dark
            :preserve
              git checkout #{@merge_request.target_branch}
              git reset origin/#{@merge_request.target_branch}
              git merge --no-ff #{@merge_request.source_project_path}-#{@merge_request.source_branch}
          %p
            %strong Step 3.
            Run your tests.
            %br For native and managed code, build the solutions and run the application to test the changes.
            %br For Ruby code, run the automated tests, review the results, and test the changes.
            %br Ruby test examples:
          %pre.dark
            :preserve
              bundle exec cucumber
              env POLTERGEIST=1 RAILS_ENV=test bundle exec rake spec:javascript
              bundle exec rspec spec
          %p
            %strong Step 4.
            If your tests pass, click the Accept Merge Request button in GitLab
        - else
          %p
            %strong Step 1.
            Update the repo and checkout the branch we are going to merge into
          %pre.dark
            :preserve
              git fetch origin
              git checkout #{@merge_request.target_branch}
              git reset origin/#{@merge_request.target_branch}
          %p
            %strong Step 2.
            Merge the branch
          %pre.dark
            :preserve
              git merge --no-ff origin/#{@merge_request.source_branch}
          %p
            %strong Step 3.
            Run your tests.
            %br For native and managed code, build the solutions and run the application to test the changes.
            %br For Ruby code, run the automated tests, review the results, and test the changes.
            %br Ruby test examples:
          %pre.dark
            :preserve
              bundle exec cucumber
              env POLTERGEIST=1 RAILS_ENV=test bundle exec rake spec:javascript
              bundle exec rspec spec
          %p
            %strong Step 4.
            If your tests pass, click the Accept Merge Request button in GitLab

:javascript
  $(function(){
    var modal = $('#modal_simulate_merge_info').modal({modal: true, show:false});
    $('.how_to_simulate_merge_link').bind("click", function(){
      modal.show();
    });
    $('.modal-header .close').bind("click", function(){
      modal.hide();
    })
  })
